{"version":3,"sources":["assets/finalchest.pgn.png","components/Content.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Content","response","length","className","src","Navbar","href","App","useState","name","realm","Inputs","changeInputs","updateResponse","handleChange","e","target","value","prev","chest","onSubmit","preventDefault","fetch","then","ok","json","alert","console","log","onChange","placeholder","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,4C,oLCuB5BC,MArBf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OAAOA,EACuD,GAA5DA,EAAQ,sCAA0CC,OAChD,mDAEA,yBAAKC,UAAW,WACd,yBAAKC,IAAKH,EAAQ,gBAClB,2DAEG,IACCA,EAAQ,sCAA0C,GAAlD,eAOR,sDCjBW,SAASI,IACtB,OACE,yBAAKF,UAAU,OACb,uBAAGG,KAAK,wCAAR,W,oBCkESC,MAjEf,WAAgB,IAAD,EACkBC,mBAAS,CAAEC,KAAM,GAAIC,MAAO,KAD9C,mBACNC,EADM,KACEC,EADF,OAEsBJ,mBAAS,MAF/B,mBAENP,EAFM,KAEIY,EAFJ,KAIPC,EAAe,SAACC,GAAO,IAAD,EACFA,EAAEC,OAAlBP,EADkB,EAClBA,KAAMQ,EADY,EACZA,MACdL,GAAa,SAACM,GAAD,mBAAC,eACTA,GADQ,kBAEVT,EAAOQ,QAsBZ,OACE,yBAAKd,UAAU,OACb,kBAACE,EAAD,MACA,4BAAQF,UAAU,cAChB,yBAAKA,UAAU,SACb,mFAEE,yBAAKC,IAAKe,QAGd,0BAAMC,SA5BS,SAACL,GACpBA,EAAEM,iBACFC,MAAM,+DAAD,OAC4DX,EAAOD,MADnE,iBACiFC,EAAOF,KADxF,kDAGFc,MAAK,SAACtB,GACL,GAAIA,EAASuB,GAAI,OAAOvB,EAASwB,OAE/BZ,EAAe,MACfa,MAAM,oDAGTH,MAAK,SAACE,GACLE,QAAQC,IAAIH,GACZZ,EAAeY,QAeb,2BACEI,SAAUf,EACVgB,YAAY,iBACZC,KAAK,OACLtB,KAAK,OACLN,UAAU,UAEZ,2BACE0B,SAAUf,EACVgB,YAAY,aACZC,KAAK,OACLtB,KAAK,QACLN,UAAU,UAEZ,4BAAQ4B,KAAK,SAAS5B,UAAU,wBAAhC,aAIF,kBAAC,EAAD,CAASF,SAAUA,OCrDP+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.aab4212f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/finalchest.pgn.c2330e14.png\";","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Content({ response }) {\r\n  return response ? (\r\n    response[\"mythic_plus_weekly_highest_level_runs\"].length == 0 ? (\r\n      <p>No mythics completed</p>\r\n    ) : (\r\n      <div className={\"content\"}>\r\n        <img src={response[\"thumbnail_url\"]}></img>\r\n        <p>\r\n          Highest mythic plus completed\r\n          {\" \" +\r\n            response[\"mythic_plus_weekly_highest_level_runs\"][0][\r\n              \"mythic_level\"\r\n            ]}\r\n        </p>\r\n      </div>\r\n    )\r\n  ) : (\r\n    <p>No sucessful retrieval</p>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <a href=\"https://github.com/daqch/weeklymplus\">Github</a>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Content from \"./components/Content\";\nimport Navbar from \"./components/Navbar\";\nimport chest from \"./assets/finalchest.pgn.png\";\n\nfunction App() {\n  const [Inputs, changeInputs] = useState({ name: \"\", realm: \"\" });\n  const [response, updateResponse] = useState(null);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    changeInputs((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetch(\n      `https://raider.io/api/v1/characters/profile?region=us&realm=${Inputs.realm}&name=${Inputs.name}&fields=mythic_plus_weekly_highest_level_runs`\n    )\n      .then((response) => {\n        if (response.ok) return response.json();\n        else {\n          updateResponse(null);\n          alert(\"there was an error retrieving this character!\");\n        }\n      })\n      .then((json) => {\n        console.log(json);\n        updateResponse(json);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <header className=\"App-header\">\n        <div className=\"title\">\n          <h4>\n            Check if you have completed your goals for the week!\n            <img src={chest}></img>\n          </h4>\n        </div>\n        <form onSubmit={handleSubmit}>\n          <input\n            onChange={handleChange}\n            placeholder=\"Character Name\"\n            type=\"text\"\n            name=\"name\"\n            className=\"input\"\n          ></input>\n          <input\n            onChange={handleChange}\n            placeholder=\"Realm Name\"\n            type=\"text\"\n            name=\"realm\"\n            className=\"input\"\n          ></input>\n          <button type=\"submit\" className=\"btn btn-md btn-light\">\n            Retrieve\n          </button>\n        </form>\n        <Content response={response}></Content>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}